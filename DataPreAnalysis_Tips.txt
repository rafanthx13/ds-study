

1. Verificar Tipos de dados

2. Verificar se para um tipo de dados (int/string) todas as rows nessa coluna é mesmo do tipo int/string. (dtypes do pandas)
	+ int,flot, string/object, datetime

3. Remover dados invlálidos:
+ Idenficá-los e substituir por Nan (np.nan) que indica que é um dado faltante. O Scik-Learnig e outros frameworkss tratam melhor Nan do que qualquer outra coisa
  - Verifica positivo/negatio onde deve ser s[o positivo
  - Em string, string vazias e nulo

4. Converter o tipo da coluna para o tipo correto "float", "category"

5. Observar se uma coluna tem mitos dados faltantes
+ Se tiver, entâo retire essa coluna
  - Se deixar uma coluna com muito Nan é ruim para qualquer modelo

6. Decidir critério para retirar coluna
  - QUantidade mínima de valores válidos

7. Preencher os valores faltante com algum dado?
  - Se númerico, daria para preencher pela média? 
  - Se categóricos, poderia substituir por uma nova categoria chamda "missign"
  - TUdo isso são estratégias, nâo é algo engessado

8. Verificar se as variáveis categoricas tem muitas categorias?
+ `features[cat_vars].apply(lambda x: len(set(x)))`
+ Talvez muitas categorias para uma string nâo representa muita informaçâi. Um exemplo disso é o nome por exemplo

9. Fazer seleção de variáveis baseadas na árvore de decisão
+ ExtraTreeClassifier

10. Otimizar classificador
+ Uma boa prática e alterar parâmetros separadamente, de forma a obter um valor que otimiza o classificador só com aquele parâmetro. E, no final, juntar tudo.
